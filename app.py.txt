import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import random

st.set_page_config(page_title="Previs√£o da Copa de Clubes", layout="wide")

st.title("üèÜ Previs√£o do Campe√£o da Copa de Clubes 2025")
st.markdown("Simula√ß√£o Monte Carlo com base em for√ßa estimada dos times. Atualize conforme os resultados reais evoluem.")

# Times classificados por grupo (exemplo atual)
grupos = {
    'A': ['Palmeiras', 'Porto'],
    'B': ['Botafogo', 'PSG'],
    'C': ['Bayern de Munique', 'Benfica'],
    'D': ['Chelsea', 'Flamengo'],
    'E': ['River Plate', 'Monterrey'],
    'F': ['Borussia Dortmund', 'Fluminense'],
    'G': ['Manchester City', 'Juventus'],
    'H': ['Real Madrid', 'RB Salzburg']
}

# For√ßas relativas (0 a 1)
forcas = {
    'Palmeiras': 0.82, 'Porto': 0.75, 'Botafogo': 0.70, 'PSG': 0.85,
    'Bayern de Munique': 0.95, 'Benfica': 0.78, 'Chelsea': 0.88, 'Flamengo': 0.80,
    'River Plate': 0.83, 'Monterrey': 0.76, 'Borussia Dortmund': 0.86, 'Fluminense': 0.78,
    'Manchester City': 0.96, 'Juventus': 0.84, 'Real Madrid': 0.94, 'RB Salzburg': 0.74
}

@st.cache_data(ttl=3600)
def simular_torneio(n=10000):
    vitorias = {time: 0 for time in forcas}
    for _ in range(n):
        # Oitavas
        oitavas = [(grupo[0], grupo[1]) for grupo in grupos.values()]

        quartas = []
        for t1, t2 in oitavas:
            p = forcas[t1] / (forcas[t1] + forcas[t2])
            quartas.append(t1 if random.random() < p else t2)

        semifinais = []
        for i in range(0, 8, 2):
            t1, t2 = quartas[i], quartas[i+1]
            p = forcas[t1] / (forcas[t1] + forcas[t2])
            semifinais.append(t1 if random.random() < p else t2)

        finais = []
        for i in range(0, 4, 2):
            t1, t2 = semifinais[i], semifinais[i+1]
            p = forcas[t1] / (forcas[t1] + forcas[t2])
            finais.append(t1 if random.random() < p else t2)

        campeao = finais[0] if random.random() < forcas[finais[0]] / (forcas[finais[0]] + forcas[finais[1]]) else finais[1]
        vitorias[campeao] += 1

    return vitorias

# Execu√ß√£o da simula√ß√£o
st.sidebar.header("Configura√ß√µes")
num_simulacoes = st.sidebar.slider("N√∫mero de Simula√ß√µes", 1000, 20000, 10000, step=1000)

st.info("Rodando simula√ß√£o Monte Carlo...")
resultados = simular_torneio(num_simulacoes)
ordenado = dict(sorted(resultados.items(), key=lambda item: item[1], reverse=True))

# Gr√°fico
st.subheader("üìä Probabilidade Estimada de T√≠tulo")
fig, ax = plt.subplots(figsize=(12, 5))
times = list(ordenado.keys())
probabilidades = [v / num_simulacoes * 100 for v in ordenado.values()]
bars = ax.bar(times, probabilidades, color='skyblue')
ax.set_ylabel("Probabilidade (%)")
ax.set_title("Estimativa de Campe√£o - Simula√ß√£o Monte Carlo")
plt.xticks(rotation=45)
st.pyplot(fig)

# Tabela
st.subheader("üìã Tabela de Probabilidades")
st.dataframe({ "Time": times, "Probabilidade (%)": np.round(probabilidades, 2) })
